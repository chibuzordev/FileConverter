# -*- coding: utf-8 -*-
"""Json-CSV conversions

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CN3_JA0Hi_ztHaB3Kapwq1zPIGd6ImLe
"""

import pandas as pd
import csv
import json
import xlsxwriter

class FileConverter:
    def __init__(self, csv_path: str, json_path: str, xlsx_path: str = None):
        """
        Handles conversion between CSV/Excel files and a structured JSON format.

        Args:
            csv_path (str): Path to the input/output CSV file.
            json_path (str): Path to the output/input JSON file.
            xlsx_path (Optional[str]): Path to Excel file (required for xlsx_to_json/json_to_xlsx).
        """
        self.csv_path = csv_path
        self.json_path = json_path
        self.xlsx_path = xlsx_path

    def _validate_columns(self, df: pd.DataFrame, sheet_name: str = None) -> pd.DataFrame:
        """Ensures required columns exist in the DataFrame."""
        required_columns = [
            "chunk_id", "title", "text", "metadata.source",
            "metadata.tags", "metadata.college", "metadata.type"
        ]
        if "section" not in df.columns:
            df["section"] = sheet_name if sheet_name else None

        for col in required_columns:
            if col not in df.columns:
                df[col] = ""

        return df

    def _create_chunk(self, row: pd.Series, fallback_section:str = None) -> dict:
        """
        Creates a JSON-compatible chunk from a row.

        Args:
            row (pd.Series): A row from the DataFrame.
            fallback_section (Optional[str]): Sheet name if 'section' is missing.

        Returns:
            dict: JSON-compatible dictionary for a chunk.
        """
        section = (
            row["section"]
            if "section" in row and pd.notna(row["section"])
            else fallback_section
        )

        return {
            "chunk_id": row["chunk_id"],
            "title": row["title"],
            "section": section,
            "text": None if pd.isna(row["text"]) else row["text"],
            "metadata": {
                "source": None if pd.isna(row["metadata.source"]) else row["metadata.source"],
                "tags": [tag.strip() for tag in str(row["metadata.tags"]).split(";")],
                "college": None if pd.isna(row["metadata.college"]) else row["metadata.college"],
                "type": None if pd.isna(row["metadata.type"]) else row["metadata.type"]
            }
        }

    def csv_to_json(self):
        """Converts a CSV file to JSON."""
        df = pd.read_csv(self.csv_path)
        df = self._validate_columns(df)

        all_chunks = [self._create_chunk(row) for _, row in df.iterrows()]

        with open(self.json_path, 'w') as json_file:
            json.dump(all_chunks, json_file, indent=4)

        print(f"✅ JSON saved to: {self.json_path}")

    def xlsx_to_json(self):
        """Converts all sheets in an Excel file to a single JSON file."""
        if not self.xlsx_path:
            raise ValueError("Excel file path is not set.")

        xl = pd.ExcelFile(self.xlsx_path)
        all_chunks = []

        for sheet_name in xl.sheet_names:
            df = xl.parse(sheet_name)
            df = self._validate_columns(df, sheet_name)

            for _, row in df.iterrows():
                all_chunks.append(self._create_chunk(row, sheet_name))

        with open(self.json_path, 'w') as f:
            json.dump(all_chunks, f, indent=4)

        print(f"✅ Combined JSON saved from Excel to: {self.json_path}")

    def json_to_csv(self):
        """Converts a JSON file to a CSV file."""
        with open(self.json_path, 'r') as json_file:
            data = json.load(json_file)

        header = [
            "chunk_id", "title", "section", "text",
            "metadata.source", "metadata.tags",
            "metadata.college", "metadata.type"
        ]

        with open(self.csv_path, mode="w", newline="", encoding="utf-8") as file:
            writer = csv.DictWriter(file, fieldnames=header)
            writer.writeheader()

            for row in data:
                row_data = {
                    "chunk_id": row["chunk_id"],
                    "title": row["title"],
                    "section": row["section"],
                    "text": row["text"],
                    "metadata.source": row["metadata"]["source"],
                    "metadata.tags": ";".join(row["metadata"]["tags"]),
                    "metadata.college": row["metadata"]["college"] if row["metadata"]["college"] else '',
                    "metadata.type": row["metadata"]["type"]
                }
                writer.writerow(row_data)

        print(f"✅ CSV file created at: {self.csv_path}")

    def json_to_xlsx(self):
        """Converts structured JSON back to Excel with separate sheets for each 'section'."""
        with open(self.json_path, 'r') as f:
            data = json.load(f)

        section_groups = {}
        for row in data:
            section = row.get("section", "Unknown")
            section_groups.setdefault(section, []).append(row)

        if not self.xlsx_path:
            raise ValueError("Excel file path is not set.")

        with pd.ExcelWriter(self.xlsx_path, engine='xlsxwriter') as writer:
            for section, rows in section_groups.items():
                flat_data = []
                for r in rows:
                    flat_data.append({
                        "chunk_id": r["chunk_id"],
                        "title": r["title"],
                        "section": r["section"],
                        "text": r["text"],
                        "metadata.source": r["metadata"]["source"],
                        "metadata.tags": ";".join(r["metadata"]["tags"]),
                        "metadata.college": r["metadata"]["college"] or '',
                        "metadata.type": r["metadata"]["type"]
                    })

                safe_sheet = str(section)[:31].replace('/', '_')
                df = pd.DataFrame(flat_data)
                df.to_excel(writer, sheet_name=safe_sheet, index=False)

        print(f"✅ Multi-sheet Excel saved to: {self.xlsx_path}")

